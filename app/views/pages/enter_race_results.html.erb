<!-- Enter Race Results Page -->
<div class="min-h-screen bg-gradient-to-br from-gray-900 via-red-900 to-black">
  <!-- Navigation Header -->
  <%= render 'shared/navigation' %>
  
  <!-- Page Title -->
  <div class="bg-gradient-to-br from-gray-900 to-gray-800 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <h1 class="text-4xl font-bold text-white text-center mb-2">üèÅ Enter Race Results</h1>
      <p class="text-xl text-gray-300 text-center">Admin-only: Manually enter race results for the Fantasy F1 League</p>
    </div>
  </div>

  <!-- Main Content -->
  <div class="container mx-auto px-4 py-8">
    <div class="max-w-6xl mx-auto">
      
      <!-- Race Selection -->
      <div class="bg-white rounded-lg shadow-lg p-6 mb-8">
        <h2 class="text-2xl font-bold text-gray-800 mb-6">üèÅ Select Race</h2>
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          <% @races.each do |race| %>
            <div class="race-card border-2 border-gray-200 rounded-lg hover:border-blue-300 hover:bg-blue-50 transition-colors bg-white">
              <div class="p-4">
                <button 
                  onclick="selectRace('<%= race.id %>', '<%= race.name %>')"
                  class="race-selector w-full text-left"
                  data-race-id="<%= race.id %>"
                >
                  <h4 class="font-semibold text-gray-900"><%= race.name %></h4>
                  <p class="text-sm text-gray-600"><%= race.date.strftime("%B %d, %Y") %></p>
                  <p class="text-sm text-gray-500"><%= race.circuit %></p>
                  <div class="mt-2">
                    <% if race.driver_results.any? %>
                      <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800">
                        ‚úì Results Complete
                      </span>
                      <div class="mt-1 text-xs text-gray-500">
                        Click to view/edit
                      </div>
                    <% else %>
                      <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800">
                        ‚ö† No Results
                      </span>
                      <div class="mt-1 text-xs text-gray-500">
                        Click to enter results
                      </div>
                    <% end %>
                    
                    <% if race.sprint_race %>
                      <div class="mt-2">
                        <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800 border border-red-300">
                          üèÅ Sprint Race
                        </span>
                      </div>
                    <% end %>
                  </div>
                </button>
              </div>
              
              <!-- Sprint Race Checkbox -->
              <div class="px-4 pb-4 border-t border-gray-200 pt-3 bg-gradient-to-r from-red-600 to-orange-600">
                <label class="flex items-center space-x-2 cursor-pointer">
                  <input 
                    type="checkbox" 
                    class="sprint-race-checkbox rounded border-gray-300 text-red-600 focus:ring-red-500 focus:ring-2 transition-all duration-200"
                    data-race-id="<%= race.id %>"
                    <%= 'checked' if race.sprint_race %>
                    onchange="updateSprintRaceStatus('<%= race.id %>', this.checked)"
                  >
                  <span class="text-sm font-medium text-red-700">üèÅ Sprint Race</span>
                </label>
                <p class="text-xs text-red-600 mt-1 font-medium">Check if this race includes a sprint event</p>
              </div>
            </div>
          <% end %>
        </div>
      </div>

      <!-- Results Entry Form -->
      <div id="results-form" class="hidden">
        <div class="bg-white rounded-lg shadow-lg p-6">
          <h3 class="text-2xl font-bold text-gray-800 mb-6" id="selected-race-name"></h3>
          
          <%= form_with url: "/submit-race-results", method: :post, local: true, class: "space-y-6" do |form| %>
            <%= form.hidden_field :race_id, id: "race_id_field" %>
            
            <!-- Driver Results (Top 10) -->
            <div class="bg-blue-50 rounded-lg p-6 border border-blue-200">
              <h4 class="text-xl font-semibold text-blue-900 mb-4">üèéÔ∏è Driver Results (Top 10)</h4>
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <% (1..10).each do |position| %>
                  <div class="border border-blue-200 rounded-lg p-4 bg-white">
                    <label class="block text-sm font-medium text-blue-900 mb-2">P<%= position %></label>
                    <select name="driver_results[<%= position %>][driver_id]" class="w-full border border-blue-300 rounded-md px-3 py-2 text-sm mb-2 focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                      <option value="">Select Driver</option>
                      <% @drivers.each do |driver| %>
                        <option value="<%= driver.id %>" data-team="<%= driver.team %>" data-team-color="<%= get_team_color(driver.team) %>"><%= driver.name %> (<%= driver.team %>)</option>
                      <% end %>
                    </select>
                    <input 
                      type="number" 
                      name="driver_results[<%= position %>][points]" 
                      placeholder="Points" 
                      class="w-full border border-blue-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                      value="<%= [25, 18, 15, 12, 10, 8, 6, 4, 2, 1][position-1] %>"
                      readonly
                    >
                  </div>
                <% end %>
              </div>
            </div>
            
            <!-- Constructor Results -->
            <div class="bg-green-50 rounded-lg p-6 border border-green-200">
              <div class="flex items-center justify-between mb-4">
                <h4 class="text-xl font-semibold text-green-900">üè≠ Constructor Results (Auto-populated from Top 3 Drivers)</h4>
                <button 
                  type="button" 
                  onclick="updateConstructorResults()" 
                  class="px-3 py-1 bg-black text-white text-sm rounded hover:bg-green-700 transition-colors"
                >
                  üîÑ Update
                </button>
              </div>
              <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <% (1..3).each do |position| %>
                  <div class="border border-green-200 rounded-lg p-4 bg-white">
                    <label class="block text-sm font-medium text-green-900 mb-2"><%= position.ordinalize %> Place</label>
                    <input 
                      type="text" 
                      name="constructor_results[<%= position %>][constructor_name]" 
                      id="constructor_<%= position %>_name"
                      class="w-full border border-green-300 rounded-md px-3 py-2 text-sm mb-2 bg-gray-100"
                      readonly
                      placeholder="Will auto-populate from driver selection"
                    >
                    <input 
                      type="hidden" 
                      name="constructor_results[<%= position %>][constructor_id]" 
                      id="constructor_<%= position %>_id"
                    >
                    <input 
                      type="number" 
                      name="constructor_results[<%= position %>][points]" 
                      placeholder="Points" 
                      class="w-full border border-green-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-green-500 focus:border-green-500"
                      value="<%= [10, 5, 2][position-1] %>"
                      readonly
                    >
                  </div>
                <% end %>
              </div>
              <div class="mt-3 p-2 bg-blue-100 border border-blue-300 rounded text-blue-800 text-sm">
                üí° <strong>Tip:</strong> Constructor results automatically populate when you select drivers for positions 1-3. 
                Use the "Update" button above if they don't appear automatically.
              </div>
            </div>
            
            <!-- Qualifying Results -->
            <div class="bg-purple-50 rounded-lg p-6 border border-purple-200">
              <h4 class="text-xl font-semibold text-purple-900 mb-4">‚ö° Qualifying Results (Top 3)</h4>
              <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <% (1..3).each do |position| %>
                  <div class="border border-purple-200 rounded-lg p-4 bg-white">
                    <label class="block text-sm font-medium text-purple-900 mb-2">P<%= position %></label>
                    <select name="qualifying_results[<%= position %>][driver_id]" class="w-full border border-purple-300 rounded-md px-3 py-2 text-sm mb-2 focus:ring-2 focus:ring-purple-500 focus:border-purple-500">
                      <option value="">Select Driver</option>
                      <% @drivers.each do |driver| %>
                        <option value="<%= driver.id %>" data-team="<%= driver.team %>" data-team-color="<%= get_team_color(driver.team) %>"><%= driver.name %> (<%= driver.team %>)</option>
                      <% end %>
                    </select>
                    <input 
                      type="number" 
                      name="qualifying_results[<%= position %>][points]" 
                      placeholder="Points" 
                      class="w-full border border-purple-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-purple-500 focus:border-purple-500"
                      value="<%= [3, 2, 1][position-1] %>"
                      readonly
                    >
                  </div>
                <% end %>
              </div>
            </div>
            
            <!-- Sprint Race Results (Conditional) -->
            <div id="sprint-race-section" class="hidden bg-white rounded-lg p-6 border border-red-200">
              <div class="flex items-center justify-between mb-4">
                <h4 class="text-xl font-semibold text-red-900">üèÅ Sprint Race Results (Top 8)</h4>
                <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-white text-red-800 border border-red-300">
                  Sprint Event
                </span>
              </div>
              <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                <% (1..8).each do |position| %>
                  <div class="border border-red-200 rounded-lg p-4 bg-white">
                    <label class="block text-sm font-medium text-red-900 mb-2">P<%= position %></label>
                    <select name="sprint_results[<%= position %>][driver_id]" class="w-full border border-red-300 rounded-md px-3 py-2 text-sm mb-2 focus:ring-2 focus:ring-red-500 focus:border-red-500">
                      <option value="">Select Driver</option>
                      <% @drivers.each do |driver| %>
                        <option value="<%= driver.id %>" data-team="<%= driver.team %>" data-team-color="<%= get_team_color(driver.team) %>"><%= driver.name %> (<%= driver.team %>)</option>
                      <% end %>
                    </select>
                    <input 
                      type="number" 
                      name="sprint_results[<%= position %>][points]" 
                      placeholder="Points" 
                      class="w-full border border-red-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-red-500 focus:border-red-500"
                      value="<%= [8, 7, 6, 5, 4, 3, 2, 1][position-1] %>"
                      readonly
                    >
                  </div>
                <% end %>
              </div>
            </div>
            
            <!-- Constructor Sprint Results (Conditional) -->
            <div id="constructor-sprint-section" class="hidden bg-white rounded-lg p-6 border border-red-200">
              <div class="flex items-center justify-between mb-4">
                <h4 class="text-xl font-semibold text-red-900">üè≠ Constructor Sprint Results (Auto-populated from Top 3 Drivers)</h4>
                <button 
                  type="button" 
                  onclick="updateConstructorSprintResults()" 
                  class="px-3 py-1 bg-black text-white text-sm rounded hover:bg-red-700 transition-colors"
                >
                  üîÑ Update
                </button>
              </div>
              <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <% (1..3).each do |position| %>
                  <div class="border border-red-200 rounded-lg p-4 bg-white">
                    <label class="block text-sm font-medium text-red-900 mb-2"><%= position.ordinalize %> Place</label>
                    <input 
                      type="text" 
                      name="constructor_sprint_results[<%= position %>][constructor_name]" 
                      id="constructor_sprint_<%= position %>_name"
                      class="w-full border border-red-300 rounded-md px-3 py-2 text-sm mb-2 bg-gray-100"
                      readonly
                      placeholder="Will auto-populate from sprint driver selection"
                    >
                    <input 
                      type="hidden" 
                      name="constructor_sprint_results[<%= position %>][constructor_id]" 
                      id="constructor_sprint_<%= position %>_id"
                    >
                    <input 
                      type="number" 
                      name="constructor_sprint_results[<%= position %>][points]" 
                      placeholder="Points" 
                      class="w-full border border-red-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-red-500 focus:border-red-500"
                      value="<%= [3, 2, 1][position-1] %>"
                      readonly
                    >
                  </div>
                <% end %>
              </div>
              <div class="mt-3 p-2 bg-red-100 border border-red-300 rounded text-red-800 text-sm">
                üí° <strong>Tip:</strong> Constructor sprint results automatically populate when you select drivers for sprint positions 1-3. 
                Use the "Update" button above if they don't appear automatically.
              </div>
              
              <!-- Sprint Multiplier Info -->
              <div class="mt-3 p-3 bg-blue-50 border border-blue-200 rounded text-blue-800 text-sm">
                üèÜ <strong>Sprint Race Team Multipliers:</strong><br>
                ‚Ä¢ 1st + 2nd Place: 1.5√ó multiplier to sprint race points<br>
                ‚Ä¢ 1st + 3rd Place: 1.3√ó multiplier to sprint race points<br>
                ‚Ä¢ 2nd + 3rd Place: 1.1√ó multiplier to sprint race points<br>
                <em>Individual positions get standard points, team combinations get multipliers!</em>
              </div>
            </div>
            
            <!-- Sprint Qualifying Results (Conditional) -->
            <div id="sprint-qualifying-section" class="hidden bg-white rounded-lg p-6 border border-red-200">
              <div class="flex items-center justify-between mb-4">
                <h4 class="text-xl font-semibold text-red-900">üèÅ Sprint Qualifying Results (Top 3)</h4>
                <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-white text-black border border-red-300">
                  Sprint Event
                </span>
              </div>
              <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
                <% (1..3).each do |position| %>
                  <div class="border border-red-200 rounded-lg p-4 bg-white">
                    <label class="block text-sm font-medium text-red-900 mb-2">P<%= position %></label>
                    <select name="sprint_qualifying_results[<%= position %>][driver_id]" class="w-full border border-red-300 rounded-md px-3 py-2 text-sm mb-2 focus:ring-2 focus:ring-red-500 focus:border-red-500">
                      <option value="">Select Driver</option>
                      <% @drivers.each do |driver| %>
                        <option value="<%= driver.id %>" data-team="<%= driver.team %>" data-team-color="<%= get_team_color(driver.team) %>"><%= driver.name %> (<%= driver.team %>)</option>
                      <% end %>
                    </select>
                    <input 
                      type="number" 
                      name="sprint_qualifying_results[<%= position %>][points]" 
                      placeholder="Points" 
                      class="w-full border border-red-300 rounded-md px-3 py-2 text-sm focus:ring-2 focus:ring-red-500 focus:border-red-500"
                      value="<%= [3, 2, 1][position-1] %>"
                      readonly
                    >
                  </div>
                <% end %>
              </div>
            </div>

            
            <!-- Submit Button -->
            <div class="text-center">
              <button type="submit" class="px-8 py-4 bg-gradient-to-r from-red-600 to-red-700 text-white text-xl font-bold rounded-lg hover:from-red-700 hover:to-red-800 transform hover:scale-105 transition-all duration-300 shadow-lg">
                üèÅ Submit Race Results
              </button>
            </div>
          <% end %>
        </div>
      </div>
      
      <!-- Back to Admin Button -->
      <div class="text-center mt-8">
        <a href="/admin" class="inline-flex items-center px-6 py-3 bg-gray-600 text-white text-lg font-semibold rounded-lg hover:bg-gray-700 transition-colors duration-200">
          ‚Üê Back to Admin Panel
        </a>
      </div>
    </div>
  </div>

  <script>
    function selectRace(raceId, raceName) {
      document.getElementById('results-form').classList.remove('hidden');
      document.getElementById('race_id_field').value = raceId;
      document.getElementById('selected-race-name').textContent = raceName;
      
      // Update button styling
      document.querySelectorAll('.race-selector').forEach(btn => {
        btn.classList.remove('border-blue-500', 'bg-blue-100');
        btn.classList.add('border-gray-200');
      });
      event.target.classList.remove('border-gray-200');
      event.target.classList.add('border-blue-500', 'bg-blue-100');
      
      // Check if this race is a sprint race and show/hide sprint sections
      checkSprintRaceStatus(raceId);
      
      // Clear form first
      clearFormData();
      
      // Load existing race results if they exist, otherwise just enable live auto-population
      loadExistingResults(raceId);
      
      // Scroll to form
      document.getElementById('results-form').scrollIntoView({ behavior: 'smooth' });
    }

    // Load existing race results into the form
    function loadExistingResults(raceId) {
      // Show loading indicator
      const submitButton = document.querySelector('button[type="submit"]');
      const originalText = submitButton.textContent;
      submitButton.textContent = '‚è≥ Loading...';
      submitButton.disabled = true;
      
      // Fetch existing results from the server
      fetch(`/api/v1/races/${raceId}/results`)
        .then(response => response.json())
        .then(data => {
          if (data.success && data.results.driver_results && data.results.driver_results.length > 0) {
            populateFormWithResults(data.results);
            console.log('Existing results loaded successfully');
          } else {
            console.log('No existing results found for this race - enabling live auto-population');
            // Enable live auto-population for races without results
            enableLiveAutoPopulation();
          }
        })
        .catch(error => {
          console.log('Error loading existing results:', error);
          // Enable live auto-population even if there's an error
          enableLiveAutoPopulation();
        })
        .finally(() => {
          // Restore submit button
          submitButton.textContent = originalText;
          submitButton.disabled = false;
        });
    }

    // Populate form with existing results
    function populateFormWithResults(results) {
      console.log('Populating form with results:', results);
      
      // Populate driver results
      if (results.driver_results) {
        console.log('Populating driver results:', results.driver_results);
        results.driver_results.forEach(result => {
          const driverSelect = document.querySelector(`select[name="driver_results[${result.position}][driver_id]"]`);
          if (driverSelect) {
            driverSelect.value = result.driver_id;
            console.log(`Set driver position ${result.position} to ${result.driver_id}`);
          }
        });
      }
      
      // Populate qualifying results
      if (results.qualifying_results) {
        results.qualifying_results.forEach(result => {
          const qualifyingSelect = document.querySelector(`select[name="qualifying_results[${result.position}][driver_id]"]`);
          if (qualifyingSelect) {
            qualifyingSelect.value = result.driver_id;
          }
        });
      }
      
      // Populate sprint race results
      if (results.sprint_results) {
        results.sprint_results.forEach(result => {
          const sprintSelect = document.querySelector(`select[name="sprint_results[${result.position}][driver_id]"]`);
          if (sprintSelect) {
            sprintSelect.value = result.driver_id;
          }
        });
      }
      
      // Populate sprint qualifying results
      if (results.sprint_qualifying_results) {
        results.sprint_qualifying_results.forEach(result => {
          const sprintQualifyingSelect = document.querySelector(`select[name="sprint_qualifying_results[${result.position}][driver_id]"]`);
          if (sprintQualifyingSelect) {
            sprintQualifyingSelect.value = result.driver_id;
          }
        });
      }
      
      // Populate constructor sprint results
      if (results.constructor_sprint_results) {
        results.constructor_sprint_results.forEach(result => {
          const constructorNameField = document.getElementById(`constructor_sprint_${result.position}_name`);
          if (constructorNameField) {
            constructorNameField.value = result.constructor_name;
          }
        });
      }
      
      // Populate constructor results from existing data first
      if (results.constructor_results) {
        console.log('Populating constructor results:', results.constructor_results);
        results.constructor_results.forEach(result => {
          const constructorName = document.getElementById(`constructor_${result.position}_name`);
          if (constructorName) {
            constructorName.value = result.constructor;
            console.log(`Set constructor position ${result.position} to ${result.constructor}`);
          }
        });
      }
      
      // Then update constructor results based on loaded driver data
      // Use setTimeout to ensure DOM is fully updated first
      setTimeout(() => {
        updateConstructorResults();
        
        // Also update constructor sprint results if sprint data was loaded
        if (results.sprint_results && results.sprint_results.length > 0) {
          updateConstructorSprintResults();
        }
      }, 100);
    }

    // Enable live auto-population for races without existing results
    function enableLiveAutoPopulation() {
      console.log('Enabling live auto-population for new race entry');
      
      // Ensure all driver select elements have event listeners
      for (let i = 1; i <= 10; i++) {
        const driverSelect = document.querySelector(`select[name="driver_results[${i}][driver_id]"]`);
        if (driverSelect) {
          // Remove existing listeners to prevent duplicates
          driverSelect.removeEventListener('change', updateConstructorResults);
          // Add fresh listener
          driverSelect.addEventListener('change', updateConstructorResults);
        }
      }
      
      // Clear any existing constructor data to start fresh
      for (let i = 1; i <= 3; i++) {
        const constructorName = document.getElementById(`constructor_${i}_name`);
        if (constructorName) {
          constructorName.value = '';
        }
      }
      
      console.log('Live auto-population enabled - constructor results will update as you select drivers');
    }

    // Check sprint race status and show/hide sprint sections
    function checkSprintRaceStatus(raceId) {
      const raceCard = document.querySelector(`[data-race-id="${raceId}"]`).closest('.race-card');
      const sprintCheckbox = raceCard.querySelector('.sprint-race-checkbox');
      const isSprintRace = sprintCheckbox.checked;
      
      const sprintRaceSection = document.getElementById('sprint-race-section');
      const constructorSprintSection = document.getElementById('constructor-sprint-section');
      const sprintQualifyingSection = document.getElementById('sprint-qualifying-section');
      
      if (isSprintRace) {
        sprintRaceSection.classList.remove('hidden');
        constructorSprintSection.classList.remove('hidden');
        sprintQualifyingSection.classList.remove('hidden');
      } else {
        sprintRaceSection.classList.add('hidden');
        constructorSprintSection.classList.add('hidden');
        sprintQualifyingSection.classList.add('hidden');
      }
    }
    
    // Clear form data
    function clearFormData() {
      // Clear driver selections
      for (let i = 1; i <= 10; i++) {
        const driverSelect = document.querySelector(`select[name="driver_results[${i}][driver_id]"]`);
        if (driverSelect) driverSelect.value = '';
      }
      
      // Clear constructor fields
      for (let i = 1; i <= 3; i++) {
        const constructorName = document.getElementById(`constructor_${i}_name`);
        if (constructorName) constructorName.value = '';
      }
      
      // Clear qualifying selections
      for (let i = 1; i <= 3; i++) {
        const qualifyingSelect = document.querySelector(`select[name="qualifying_results[${i}][driver_id]"]`);
        if (qualifyingSelect) qualifyingSelect.value = '';
      }
      
      // Clear sprint race results
      for (let i = 1; i <= 8; i++) {
        const sprintSelect = document.querySelector(`select[name="sprint_results[${i}][driver_id]"]`);
        if (sprintSelect) sprintSelect.value = '';
      }
      
      // Clear sprint qualifying results
      for (let i = 1; i <= 3; i++) {
        const sprintQualifyingSelect = document.querySelector(`select[name="sprint_qualifying_results[${i}][driver_id]"]`);
        if (sprintQualifyingSelect) sprintQualifyingSelect.value = '';
      }
      
      // Clear constructor sprint results
      for (let i = 1; i <= 3; i++) {
        const constructorSprintName = document.getElementById(`constructor_sprint_${i}_name`);
        const constructorSprintId = document.getElementById(`constructor_sprint_${i}_id`);
        if (constructorSprintName) constructorSprintName.value = '';
        if (constructorSprintId) constructorSprintId.value = '';
      }
    }

    // Auto-populate constructor sprint results based on top 3 sprint driver selections
    function updateConstructorSprintResults() {
      console.log('Updating constructor sprint results...');
      
      // Only clear constructor sprint fields if they're empty or if we're manually updating
      let shouldClear = true;
      for (let i = 1; i <= 3; i++) {
        const constructorName = document.getElementById(`constructor_sprint_${i}_name`);
        if (constructorName && constructorName.value.trim()) {
          shouldClear = false;
          break;
        }
      }
      
      if (shouldClear) {
        for (let i = 1; i <= 3; i++) {
          const constructorName = document.getElementById(`constructor_sprint_${i}_name`);
          const constructorId = document.getElementById(`constructor_sprint_${i}_id`);
          if (constructorName) constructorName.value = '';
          if (constructorId) constructorId.value = '';
        }
      }

      // Get top 3 sprint driver selections
      const top3SprintDrivers = [];
      for (let i = 1; i <= 3; i++) {
        const driverSelect = document.querySelector(`select[name="sprint_results[${i}][driver_id]"]`);
        if (driverSelect && driverSelect.value) {
          const selectedOption = driverSelect.options[driverSelect.selectedIndex];
          const driverName = selectedOption.text.split(' (')[0];
          const teamName = selectedOption.text.match(/\(([^)]+)\)/)?.[1];
          if (teamName) {
            top3SprintDrivers.push({ position: i, driver: driverName, team: teamName });
            console.log(`Sprint Position ${i}: ${driverName} (${teamName})`);
          }
        }
      }

      if (top3SprintDrivers.length === 0) {
        console.log('No sprint drivers selected in top 3 positions');
        return;
      }

      // Populate constructor sprint results based on team performance
      const teamPositions = {};
      top3SprintDrivers.forEach(driver => {
        if (!teamPositions[driver.team]) {
          teamPositions[driver.team] = [];
        }
        teamPositions[driver.team].push(driver.position);
      });

      // Sort teams by best driver position (lowest number = best)
      const sortedTeams = Object.entries(teamPositions)
        .sort(([, positionsA], [, positionsB]) => Math.min(...positionsA) - Math.min(...positionsB));

      console.log('Sorted sprint teams:', sortedTeams);

      // Assign constructor sprint positions based on driver positions
      // Constructor P1 = Team with driver in P1, Constructor P2 = Team with driver in P2, etc.
      top3SprintDrivers.forEach(driver => {
        const constructorPosition = driver.position; // Use actual driver position
        const teamName = driver.team;
        
        const constructorNameField = document.getElementById(`constructor_sprint_${constructorPosition}_name`);
        if (constructorNameField) {
          constructorNameField.value = teamName;
          console.log(`Constructor Sprint P${constructorPosition}: ${teamName} (from driver P${driver.position})`);
        }
      });
    }

    // Auto-populate constructor results based on top 3 driver selections
    function updateConstructorResults() {
      console.log('Updating constructor results...');
      
      // Only clear constructor fields if they're empty or if we're manually updating
      // This prevents clearing existing data when loading results
      let shouldClear = true;
      for (let i = 1; i <= 3; i++) {
        const constructorName = document.getElementById(`constructor_${i}_name`);
        if (constructorName && constructorName.value.trim()) {
          shouldClear = false;
          break;
        }
      }
      
      if (shouldClear) {
        for (let i = 1; i <= 3; i++) {
          const constructorName = document.getElementById(`constructor_${i}_name`);
          const constructorId = document.getElementById(`constructor_${i}_id`);
          if (constructorName) constructorName.value = '';
          if (constructorId) constructorId.value = '';
        }
      }

      // Get top 3 driver selections
      const top3Drivers = [];
      for (let i = 1; i <= 3; i++) {
        const driverSelect = document.querySelector(`select[name="driver_results[${i}][driver_id]"]`);
        if (driverSelect && driverSelect.value) {
          const selectedOption = driverSelect.options[driverSelect.selectedIndex];
          const driverName = selectedOption.text.split(' (')[0];
          const teamName = selectedOption.text.match(/\(([^)]+)\)/)?.[1];
          if (teamName) {
            top3Drivers.push({ position: i, driver: driverName, team: teamName });
            console.log(`Position ${i}: ${driverName} (${teamName})`);
          }
        }
      }

      if (top3Drivers.length === 0) {
        console.log('No drivers selected in top 3 positions');
        return;
      }

      // Populate constructor results based on team performance
      const teamPositions = {};
      top3Drivers.forEach(driver => {
        if (!teamPositions[driver.team]) {
          teamPositions[driver.team] = [];
        }
        teamPositions[driver.team].push(driver.position);
      });

      // Sort teams by best driver position (lowest number = best)
      const sortedTeams = Object.entries(teamPositions)
        .sort(([, positionsA], [, positionsB]) => Math.min(...positionsA) - Math.min(...positionsB));

      console.log('Sorted teams:', sortedTeams);

      // Assign constructor positions based on driver positions
      // Constructor P1 = Team with driver in P1, Constructor P2 = Team with driver in P2, etc.
      top3Drivers.forEach(driver => {
        const constructorPosition = driver.position; // Use actual driver position
        const teamName = driver.team;
        
        const constructorNameField = document.getElementById(`constructor_${constructorPosition}_name`);
        if (constructorNameField) {
          constructorNameField.value = teamName;
          console.log(`Constructor P${constructorPosition}: ${teamName} (from driver P${driver.position})`);
        }
      });
    }

    // Update sprint race status
    function updateSprintRaceStatus(raceId, isSprintRace) {
      console.log(`Updating race ${raceId} sprint status to: ${isSprintRace}`);
      
      // Send AJAX request to update sprint race status
      fetch('/api/v1/races/' + raceId + '/update_sprint_status', {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
        },
        body: JSON.stringify({
          sprint_race: isSprintRace
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          console.log('Sprint race status updated successfully');
          // Show visual feedback
          const checkbox = document.querySelector(`input[data-race-id="${raceId}"]`);
          if (checkbox) {
            checkbox.classList.add('ring-2', 'ring-green-500');
            setTimeout(() => {
              checkbox.classList.remove('ring-2', 'ring-green-500');
            }, 1000);
          }
          
          // Update sprint sections visibility if this race is currently selected
          const currentRaceId = document.getElementById('race_id_field').value;
          if (currentRaceId == raceId) {
            checkSprintRaceStatus(raceId);
          }
        } else {
          console.error('Failed to update sprint race status:', data.error);
          // Revert checkbox state on error
          const checkbox = document.querySelector(`input[data-race-id="${raceId}"]`);
          if (checkbox) {
            checkbox.checked = !isSprintRace;
          }
          alert('Failed to update sprint race status. Please try again.');
        }
      })
      .catch(error => {
        console.error('Error updating sprint race status:', error);
        // Revert checkbox state on error
        const checkbox = document.querySelector(`input[data-race-id="${raceId}"]`);
        if (checkbox) {
          checkbox.checked = !isSprintRace;
        }
        alert('Error updating sprint race status. Please try again.');
      });
    }

    // Add event listeners to all driver selects and form submission
    document.addEventListener('DOMContentLoaded', function() {
      // Add event listeners to all driver selects (positions 1-10)
      for (let i = 1; i <= 10; i++) {
        const driverSelect = document.querySelector(`select[name="driver_results[${i}][driver_id]"]`);
        if (driverSelect) {
          driverSelect.addEventListener('change', updateConstructorResults);
        }
      }
      
      // Add event listeners to all sprint driver selects (positions 1-8)
      for (let i = 1; i <= 8; i++) {
        const sprintDriverSelect = document.querySelector(`select[name="sprint_results[${i}][driver_id]"]`);
        if (sprintDriverSelect) {
          sprintDriverSelect.addEventListener('change', updateConstructorSprintResults);
        }
      }
      
      // Add event listener to form submission to ensure constructor results are populated
      const form = document.querySelector('form');
      if (form) {
        form.addEventListener('submit', function(e) {
          // Force update constructor results before submission
          updateConstructorResults();
          
          // Check if this is a sprint race and update constructor sprint results
          const raceId = document.getElementById('race_id_field').value;
          const raceCard = document.querySelector(`[data-race-id="${raceId}"]`);
          if (raceCard) {
            const sprintCheckbox = raceCard.querySelector('.sprint-race-checkbox');
            if (sprintCheckbox && sprintCheckbox.checked) {
              updateConstructorSprintResults();
            }
          }
          
          // Validate that constructor results are populated
          let hasConstructorResults = false;
          for (let i = 1; i <= 3; i++) {
            const constructorName = document.getElementById(`constructor_${i}_name`);
            if (constructorName && constructorName.value.trim()) {
              hasConstructorResults = true;
              break;
            }
          }
          
          if (!hasConstructorResults) {
            e.preventDefault();
            alert('Please ensure driver results for positions 1-3 are selected so constructor results can be auto-populated.');
            return false;
          }
        });
      }
      
      // Style dropdown options with team colors
      function styleDropdownOptions() {
        const allSelects = document.querySelectorAll('select[name*="driver_id"]');
        allSelects.forEach(select => {
          select.addEventListener('change', function() {
            const selectedOption = this.options[this.selectedIndex];
            if (selectedOption && selectedOption.dataset.teamColor) {
              // Apply team color to the selected option text
              this.style.color = selectedOption.dataset.teamColor;
            } else {
              // Reset to default color if no team selected
              this.style.color = '';
            }
          });
          
          // Style the options with team colors
          Array.from(select.options).forEach(option => {
            if (option.dataset.teamColor) {
              option.style.color = option.dataset.teamColor;
            }
          });
        });
      }
      
      // Initialize dropdown styling
      styleDropdownOptions();
    });
  </script>
</div>
